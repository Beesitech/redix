// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: redix.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SetStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Expires     string `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	IfNotExists bool   `protobuf:"varint,4,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
}

func (x *SetStringRequest) Reset() {
	*x = SetStringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStringRequest) ProtoMessage() {}

func (x *SetStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStringRequest.ProtoReflect.Descriptor instead.
func (*SetStringRequest) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{0}
}

func (x *SetStringRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetStringRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetStringRequest) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *SetStringRequest) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type SetFloatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Expires     string  `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	IfNotExists bool    `protobuf:"varint,4,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
}

func (x *SetFloatRequest) Reset() {
	*x = SetFloatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFloatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFloatRequest) ProtoMessage() {}

func (x *SetFloatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFloatRequest.ProtoReflect.Descriptor instead.
func (*SetFloatRequest) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{1}
}

func (x *SetFloatRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetFloatRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SetFloatRequest) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *SetFloatRequest) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type GetStringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetStringResponse) Reset() {
	*x = GetStringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStringResponse) ProtoMessage() {}

func (x *GetStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStringResponse.ProtoReflect.Descriptor instead.
func (*GetStringResponse) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{2}
}

func (x *GetStringResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetFloatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetFloatResponse) Reset() {
	*x = GetFloatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFloatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFloatResponse) ProtoMessage() {}

func (x *GetFloatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFloatResponse.ProtoReflect.Descriptor instead.
func (*GetFloatResponse) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{3}
}

func (x *GetFloatResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{4}
}

func (x *GetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type IncrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Delta   float64 `protobuf:"fixed64,2,opt,name=delta,proto3" json:"delta,omitempty"`
	Expires string  `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *IncrRequest) Reset() {
	*x = IncrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrRequest) ProtoMessage() {}

func (x *IncrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrRequest.ProtoReflect.Descriptor instead.
func (*IncrRequest) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{5}
}

func (x *IncrRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *IncrRequest) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *IncrRequest) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

type HasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HasRequest) Reset() {
	*x = HasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasRequest) ProtoMessage() {}

func (x *HasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasRequest.ProtoReflect.Descriptor instead.
func (*HasRequest) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{6}
}

func (x *HasRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type IncrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewValue float64 `protobuf:"fixed64,1,opt,name=newValue,proto3" json:"newValue,omitempty"`
}

func (x *IncrResponse) Reset() {
	*x = IncrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrResponse) ProtoMessage() {}

func (x *IncrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrResponse.ProtoReflect.Descriptor instead.
func (*IncrResponse) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{7}
}

func (x *IncrResponse) GetNewValue() float64 {
	if x != nil {
		return x.NewValue
	}
	return 0
}

type HasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *HasResponse) Reset() {
	*x = HasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasResponse) ProtoMessage() {}

func (x *HasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasResponse.ProtoReflect.Descriptor instead.
func (*HasResponse) Descriptor() ([]byte, []int) {
	return file_redix_proto_rawDescGZIP(), []int{8}
}

func (x *HasResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

var File_redix_proto protoreflect.FileDescriptor

var file_redix_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x29, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x4f, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x25, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x32, 0xc7, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x63,
	0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x03, 0x48, 0x61, 0x73, 0x12, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redix_proto_rawDescOnce sync.Once
	file_redix_proto_rawDescData = file_redix_proto_rawDesc
)

func file_redix_proto_rawDescGZIP() []byte {
	file_redix_proto_rawDescOnce.Do(func() {
		file_redix_proto_rawDescData = protoimpl.X.CompressGZIP(file_redix_proto_rawDescData)
	})
	return file_redix_proto_rawDescData
}

var file_redix_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_redix_proto_goTypes = []interface{}{
	(*SetStringRequest)(nil),  // 0: pb.SetStringRequest
	(*SetFloatRequest)(nil),   // 1: pb.SetFloatRequest
	(*GetStringResponse)(nil), // 2: pb.GetStringResponse
	(*GetFloatResponse)(nil),  // 3: pb.GetFloatResponse
	(*GetRequest)(nil),        // 4: pb.GetRequest
	(*IncrRequest)(nil),       // 5: pb.IncrRequest
	(*HasRequest)(nil),        // 6: pb.HasRequest
	(*IncrResponse)(nil),      // 7: pb.IncrResponse
	(*HasResponse)(nil),       // 8: pb.HasResponse
	(*empty.Empty)(nil),       // 9: google.protobuf.Empty
}
var file_redix_proto_depIdxs = []int32{
	0, // 0: pb.RedixService.SetString:input_type -> pb.SetStringRequest
	1, // 1: pb.RedixService.SetFloat:input_type -> pb.SetFloatRequest
	4, // 2: pb.RedixService.GetString:input_type -> pb.GetRequest
	4, // 3: pb.RedixService.GetFloat:input_type -> pb.GetRequest
	5, // 4: pb.RedixService.Incr:input_type -> pb.IncrRequest
	6, // 5: pb.RedixService.Has:input_type -> pb.HasRequest
	9, // 6: pb.RedixService.SetString:output_type -> google.protobuf.Empty
	9, // 7: pb.RedixService.SetFloat:output_type -> google.protobuf.Empty
	2, // 8: pb.RedixService.GetString:output_type -> pb.GetStringResponse
	3, // 9: pb.RedixService.GetFloat:output_type -> pb.GetFloatResponse
	7, // 10: pb.RedixService.Incr:output_type -> pb.IncrResponse
	8, // 11: pb.RedixService.Has:output_type -> pb.HasResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_redix_proto_init() }
func file_redix_proto_init() {
	if File_redix_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFloatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFloatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redix_proto_goTypes,
		DependencyIndexes: file_redix_proto_depIdxs,
		MessageInfos:      file_redix_proto_msgTypes,
	}.Build()
	File_redix_proto = out.File
	file_redix_proto_rawDesc = nil
	file_redix_proto_goTypes = nil
	file_redix_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RedixServiceClient is the client API for RedixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedixServiceClient interface {
	SetString(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetFloat(ctx context.Context, in *SetFloatRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetString(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStringResponse, error)
	GetFloat(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetFloatResponse, error)
	Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*IncrResponse, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error)
}

type redixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedixServiceClient(cc grpc.ClientConnInterface) RedixServiceClient {
	return &redixServiceClient{cc}
}

func (c *redixServiceClient) SetString(ctx context.Context, in *SetStringRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.RedixService/SetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redixServiceClient) SetFloat(ctx context.Context, in *SetFloatRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.RedixService/SetFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redixServiceClient) GetString(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStringResponse, error) {
	out := new(GetStringResponse)
	err := c.cc.Invoke(ctx, "/pb.RedixService/GetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redixServiceClient) GetFloat(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetFloatResponse, error) {
	out := new(GetFloatResponse)
	err := c.cc.Invoke(ctx, "/pb.RedixService/GetFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redixServiceClient) Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*IncrResponse, error) {
	out := new(IncrResponse)
	err := c.cc.Invoke(ctx, "/pb.RedixService/Incr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redixServiceClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error) {
	out := new(HasResponse)
	err := c.cc.Invoke(ctx, "/pb.RedixService/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedixServiceServer is the server API for RedixService service.
type RedixServiceServer interface {
	SetString(context.Context, *SetStringRequest) (*empty.Empty, error)
	SetFloat(context.Context, *SetFloatRequest) (*empty.Empty, error)
	GetString(context.Context, *GetRequest) (*GetStringResponse, error)
	GetFloat(context.Context, *GetRequest) (*GetFloatResponse, error)
	Incr(context.Context, *IncrRequest) (*IncrResponse, error)
	Has(context.Context, *HasRequest) (*HasResponse, error)
}

// UnimplementedRedixServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRedixServiceServer struct {
}

func (*UnimplementedRedixServiceServer) SetString(context.Context, *SetStringRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetString not implemented")
}
func (*UnimplementedRedixServiceServer) SetFloat(context.Context, *SetFloatRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFloat not implemented")
}
func (*UnimplementedRedixServiceServer) GetString(context.Context, *GetRequest) (*GetStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetString not implemented")
}
func (*UnimplementedRedixServiceServer) GetFloat(context.Context, *GetRequest) (*GetFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFloat not implemented")
}
func (*UnimplementedRedixServiceServer) Incr(context.Context, *IncrRequest) (*IncrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incr not implemented")
}
func (*UnimplementedRedixServiceServer) Has(context.Context, *HasRequest) (*HasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}

func RegisterRedixServiceServer(s *grpc.Server, srv RedixServiceServer) {
	s.RegisterService(&_RedixService_serviceDesc, srv)
}

func _RedixService_SetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedixServiceServer).SetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedixService/SetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedixServiceServer).SetString(ctx, req.(*SetStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedixService_SetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedixServiceServer).SetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedixService/SetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedixServiceServer).SetFloat(ctx, req.(*SetFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedixService_GetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedixServiceServer).GetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedixService/GetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedixServiceServer).GetString(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedixService_GetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedixServiceServer).GetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedixService/GetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedixServiceServer).GetFloat(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedixService_Incr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedixServiceServer).Incr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedixService/Incr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedixServiceServer).Incr(ctx, req.(*IncrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedixService_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedixServiceServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RedixService/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedixServiceServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedixService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RedixService",
	HandlerType: (*RedixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetString",
			Handler:    _RedixService_SetString_Handler,
		},
		{
			MethodName: "SetFloat",
			Handler:    _RedixService_SetFloat_Handler,
		},
		{
			MethodName: "GetString",
			Handler:    _RedixService_GetString_Handler,
		},
		{
			MethodName: "GetFloat",
			Handler:    _RedixService_GetFloat_Handler,
		},
		{
			MethodName: "Incr",
			Handler:    _RedixService_Incr_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _RedixService_Has_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redix.proto",
}
